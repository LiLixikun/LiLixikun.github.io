(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{383:function(t,a,s){"use strict";s.r(a);var r=s(26),v=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"实战特训"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实战特训"}},[t._v("#")]),t._v(" 实战特训")]),t._v(" "),s("ul",[s("li",[t._v("计算中的计算机原理(位运算)")]),t._v(" "),s("li",[t._v("双指针技巧")]),t._v(" "),s("li",[t._v("递归思想")]),t._v(" "),s("li",[t._v("广度优先和深度优先")]),t._v(" "),s("li",[t._v("最常见的算法范式\n暴力法\n分治法\n回溯算法\n动态规划\n贪心算法\n分支界限法")])]),t._v(" "),s("h2",{attrs:{id:"双指针技巧"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#双指针技巧"}},[t._v("#")]),t._v(" 双指针技巧")]),t._v(" "),s("p",[t._v("双指针技巧可以分为两类,一类是 "),s("strong",[t._v("快慢指针")]),t._v(",另一类是 "),s("strong",[t._v("左右指针")]),t._v(" . 前者解决主要是链表的问题,比如典型的判定链表是否包含还;后者主要解决数组(或者字符串)中的问题,比如二分查找")]),t._v(" "),s("h3",{attrs:{id:"快慢指针的常见算法"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#快慢指针的常见算法"}},[t._v("#")]),t._v(" 快慢指针的常见算法")]),t._v(" "),s("p",[t._v("快慢指针一般都初始化执行链表的头节点 head,前进时快指针 fast 在前,慢指针 solw 在后,巧妙解决一些链表的一些问题")])])}),[],!1,null,null,null);a.default=v.exports}}]);